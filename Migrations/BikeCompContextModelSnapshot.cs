// <auto-generated />
using System;
using BikeComp.API.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BikeComp.API.Migrations
{
    [DbContext(typeof(BikeCompContext))]
    partial class BikeCompContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BikeComp.API.Entities.Bike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BikeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BikeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("DateOfService")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Bikes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            BikeName = "StuntJumper Carbon Expert",
                            BikeType = "Trail",
                            DateOfService = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Manufacturer = "Specialized"
                        },
                        new
                        {
                            Id = new Guid("da2fd609-d754-4feb-8acd-c4f9ff13ba96"),
                            BikeName = "Fuel Ex 8.9",
                            BikeType = "Enduro",
                            DateOfService = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Manufacturer = "Trek"
                        },
                        new
                        {
                            Id = new Guid("2902b665-1190-4c70-9915-b9c2d7680450"),
                            BikeName = "Hightower CC",
                            BikeType = "Trail",
                            DateOfService = new DateTimeOffset(new DateTime(2024, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Manufacturer = "Santa Cruz"
                        },
                        new
                        {
                            Id = new Guid("102b566b-ba1f-404c-b2df-e2cde39ade09"),
                            BikeName = "V10",
                            BikeType = "Downhill",
                            DateOfService = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Manufacturer = "Santa Cruz"
                        },
                        new
                        {
                            Id = new Guid("5b3621c0-7b12-4e80-9c8b-3398cba7ee05"),
                            BikeName = "Firebird 429",
                            BikeType = "Downcountry",
                            DateOfService = new DateTimeOffset(new DateTime(2022, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Manufacturer = "Pivot"
                        },
                        new
                        {
                            Id = new Guid("2aadd2df-7caf-45ab-9355-7f6332985a87"),
                            BikeName = "Mega",
                            BikeType = "Enduro",
                            DateOfService = new DateTimeOffset(new DateTime(2022, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Manufacturer = "Nukeproof"
                        },
                        new
                        {
                            Id = new Guid("2ee49fe3-edf2-4f91-8409-3eb25ce6ca51"),
                            BikeName = "Status 160",
                            BikeType = "Super Enduro",
                            DateOfService = new DateTimeOffset(new DateTime(2024, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Manufacturer = "Specialized"
                        });
                });

            modelBuilder.Entity("BikeComp.API.Entities.Components", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BikeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ServiceDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BikeId");

                    b.ToTable("Components");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b1c2b4d-48c7-402a-80c3-cc796ad49c6b"),
                            BikeId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            ComponentName = "Suspension Fork",
                            Description = "Fox Float 34 Performance Elite 140mm",
                            Manufacturer = "Fox",
                            ManufacturerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            ServiceDate = new DateTimeOffset(new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("d8663e5e-7494-4f81-8739-6e0de1bea7ee"),
                            BikeId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            ComponentName = "Brakes",
                            Description = "SRAM Guide RSC Brakeset",
                            Manufacturer = "SRAM",
                            ManufacturerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            ServiceDate = new DateTimeOffset(new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("d173e20d-159e-4127-9ce9-b0ac2564ad97"),
                            BikeId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            ComponentName = "Wheelset",
                            Description = "Roval 30mm Wheelset",
                            Manufacturer = "Specialized",
                            ManufacturerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            ServiceDate = new DateTimeOffset(new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("40ff5488-fdab-45b5-bc3a-14302d59869a"),
                            BikeId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            ComponentName = "Rear shock",
                            Description = "Fox Float DPS 130mm",
                            Manufacturer = "Fox",
                            ManufacturerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            ServiceDate = new DateTimeOffset(new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("BikeComp.API.Entities.Components", b =>
                {
                    b.HasOne("BikeComp.API.Entities.Bike", "Bike")
                        .WithMany("Components")
                        .HasForeignKey("BikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bike");
                });

            modelBuilder.Entity("BikeComp.API.Entities.Bike", b =>
                {
                    b.Navigation("Components");
                });
#pragma warning restore 612, 618
        }
    }
}
